====IMPORTANT=====
>when the Enitity has UserName (Pascal case) is will turn to userName (camel case) when returned in json
>npm install ngx-bootstrap@19 bootstrap font-awesome
>add the min.css path to angular.json => styles

===SSL====
>instal mkcert
>mkdir ssl in client
>cd ssl
>put 'mkcert localhost'
>put ssl config in angular.json => serve => options


====COMPONENT=====
>component is the js/ts part of the webpapp
> 'selector' is the html tag used to insert this component
> 'templateUrl' is the html file using the component
> 'styleUrl' is the css of the template
> components can have implements
> oninit is like useeffect that run once after the component mounts
> ng g c nav --skip-tests => generate a component named nav without tests, it will also generate the template and styles


===HTTP====
>can be registered through providers in app.config
>can be injected in app.component so we can use it in html

===Observables===
>stream of data that observe for changes
>needed to subscribe to use it
>then we can put inside what will happen next, if theres error, and after all completes

===Directives===
>make sure to inlcude NgFor in the imports in component
>  *ngFor = loop over arrays like .map

>@for => alternative to ngFor

==AUTH==
>string => hash => salt => unique hashes


===template reference variable====
>#loginForm="ngForm" => making it accessible inside the component.
>to identify elements instead of id

====FORMS====
>(ngSubmit)="login()" => to submit the form, to define the method to call after submitting
>[(ngModel)]="model.username" => two way binding
>[()] meaning it can receive data from the component and the template can also send data to the component 
>>>>[(ngModel)]="model.username" â†’ Two-way data binding:
>>Syncs input field with model.username in your TypeScript.
>>If the user types, model.username updates automatically.
>>If model.username changes in the component, it updates in the input.

====SERVICES====
>HTTP request are commonly sent through services
> items fetched by a service can be shared across all components
> ng g s _services/account --skip-tests ==> create a services is _services directory
>services can be injected to any component
> services are SINGLETONS
> Iinitialized when the app is visted
> something that is shared for all components

