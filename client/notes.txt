====IMPORTANT=====
>when the Enitity has UserName (Pascal case) is will turn to userName (camel case) when returned in json
>npm install ngx-bootstrap@19 bootstrap font-awesome
>add the min.css path to angular.json => styles
>anything inside the component can be used inside that 
>private method will not be accessed by its template
>DONT FORGET to return the RESPONSE if you pipe a http

===SSL====
>instal mkcert
>mkdir ssl in client
>cd ssl
>put 'mkcert localhost'
>put ssl config in angular.json => serve => options


====COMPONENT=====
>component is the js/ts part of the webpapp
> 'selector' is the html tag used to insert this component
> 'templateUrl' is the html file using the component
> 'styleUrl' is the css of the template
> components can have implements
> oninit is like useeffect that run once after the component mounts
> ng g c nav --skip-tests => generate a component named nav without tests, it will also generate the template and styles


===HTTP====
>can be registered through providers in app.config
>can be injected in app.component so we can use it in html

===Observables===
>stream of data that observe for changes
>needed to .subscribe to use it
>then we can put inside what will happen next, if theres error, and after all completes
> 'pipe' to do something with the return values, so any components that subscribe will do the same pipe function

===Directives===
>make sure to inlcude NgFor in the imports in component
>  *ngFor = loop over arrays like .map

>@for => alternative to ngFor

==AUTH==
>string => hash => salt => unique hashes


===template reference variable====
>#loginForm="ngForm" => making it accessible inside the component.
>to identify elements instead of id

====FORMS====
>(ngSubmit)="login()" => to submit the form, to define the method to call after submitting
>[(ngModel)]="model.username" => two way binding
>[()] meaning it can receive data from the component and the template can also send data to the component 
>>>>[(ngModel)]="model.username" → Two-way data binding:
>>Syncs input field with model.username in your TypeScript.
>>If the user types, model.username updates automatically.
>>If model.username changes in the component, it updates in the input.

====SERVICES====
>HTTP request are commonly sent through services
> items fetched by a service can be shared across all components
> ng g s _services/account --skip-tests ==> create a services is _services directory
>services is always INJECTED to any component
> services are SINGLETONS
> Iinitialized when the app is visted
> something that is shared for all components
> when injected inside component it doesn't return the actual data—it returns an Observable

===BOOTSTRAP===
>to enable interactivity like dropdown
>u need to put the provider in app.config.ts
>then put the import module in compoenent imports

===STRUCTURAL DIRECTIVES====
>starts with * like *ngif *ngfor
>changes the dom so it brings ui changes

===SIGNALS===
>ntofies consumers when a value changes
>automatically unsubscribe/cleanup
>used in state management
>using SIGNALS need () at the end if you want to get the value

===MODELS===
>typically just types
> always use 'interface' instead of 'type'

===PARENT TO CHILD=====
>put input signal in CHILD
>pass the values in parent template in []
>use the signal in child template with ()

===CHILD TO PARENT=====
>put output signal in CHILD
>put the out in parent template in () then the parent method that will receive the values from child

===ROUTES====
>put routes in app.routes
>put outlet in component where other component will render
>put routerLink="/routename" in <a> tags
> put routerLinkActive="active" to add classes if the link is active(if the current route/path is the same as the tag in its routelink) 

====TOASTS===
>npm install ngx-toastr
>add it to the provider
>add it to the angular json in styles
>inject toastrservice in component that will use toastr

====ROUTE GUARDS===
>ng g g _guards/auth --skip-tests
>choose canactivate
>make the guard conditions
>return true for allowed access, false for not allowed to access
>put the canactivate in routes.ts to activate the guard

==THEME====
>npm i bootswatch

===INTERCEPTORS==
>intercept http request and check for errors
>ng g interceptor _interceptors/error --skip-tests
>helpful for centralized error catcher
>so there will be only one toastr for all errors
> add withInterceptors([errorInterceptor]) in provider in config
>the return errors will be catched by 'error:' in subscribe
>things we can do with the intercepted errors:
   >toast
   >notfound page
   >validation error warning in forms input

===NAVIGATION EXTRAS===
>values u can send along with switching route programatically
>can only be accessed by the route that will receive by using a constructor

====ENV=====
>ng g environments
>when importing make sure its from environment and not environment.development