
===FOUNDATION====
>edit configs
>remove unneccesary files
>edit program cs to include services for dbcontext
>install entity pakages
>make entity
>make dbcontext
>make migrations
>update database
>edit the controller
>add cors services
>add cors to middleware
>add entity to include passwordhash and salt
>migrate again => dotnet ef migrations add UserEntityUpdated
>update database => dotnet ef database update
>make base controller that other controllers will inherit from
>make the second controller for register
>make DTO for register, make the dto the parameter
>use hashing password
>make the endpoint for login, use a separate dto for login
>make a Service
>make interface using interface template
>make the token service
>add service to program cs
>implement the interface to token service
>install system.identitymodel.tokens.jwt
>use it in key making in token service
>make a DTO of return values for login endpoint (return only username and token not including password)
>inject the itokenservice interface and use the createtoken method for both the register and login
>Put [Authorize] in every endpoint that needs authentication
>microsoft.aspnetcore.authentication.jwtbearer => to use endpoint security
>Add service jwt in program cs
>add middleware for auth
>make extensions to clean up program.cs
>make exceptions/errors middleware
====EXTENDING THE API===
>add columns for appuser entity
>make the photo entity ==> dont forget the nav properties
>make a dateonly extension for age calculation
>make another migrations to update
>dotnet ef migrations add UpdatedUserEntity
>add the updating migration and seeding in program cs
> drop by dotnet ef database drop
> run it again to apply migration and seed users
>start making the repository
> make the IUserRepository interface
>implement it in the data folder (implementation class/service)
>add it in service extension
>remove the datacontext in controller and inject the userRepository instead
>Make a DTO for the return to fix json serializer problem
> install automapper from nuget
>setup automapperprofiles in helpers folder
>add automapper service to the extension
>switch return types of controllers to DTO
>inject automapper and map entities to DTO on controllers
>optimize repository by projecting to dto in query instead of returning all fields then automapping
>do the mapping in repository instead
>remove automapper in controller
>make dto for updating user info
>add httpput endpoint for update
